name: Deploy and Test on Minikube

on:
  push:
    branches:
      - main

jobs:
  deploy-minikube:
    runs-on: windows-latest  # Используем Windows Runner для Minikube

    env:
      IMAGE_NAME: expense-tracker
      NAMESPACE: default  # Kubernetes namespace

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Установить Minikube
      - name: Install Minikube
        run: |
          choco install minikube -y
          minikube start --driver=docker --wait=true
          minikube status

      # Установить kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.27.0/bin/windows/amd64/kubectl.exe"
          mkdir -Force $Env:USERPROFILE\kubectl
          Move-Item -Path kubectl.exe -Destination $Env:USERPROFILE\kubectl
          [Environment]::SetEnvironmentVariable("PATH", "$Env:USERPROFILE\kubectl;$Env:PATH", [EnvironmentVariableTarget]::Process)
          kubectl version --client
          kubectl config use-context minikube

      # Подключить Minikube к локальному Docker-демону
      - name: Use Minikube Docker Daemon
        shell: pwsh
        run: |
          & minikube docker-env | Invoke-Expression
          docker ps  # Проверяем доступ к Docker-демону Minikube

      # Сборка и загрузка образа в Minikube
      - name: Build Docker image in Minikube
        shell: pwsh
        run: |
          docker build -t expense-tracker:latest .
          docker images | Where-Object { $_.Repository -eq "expense-tracker" }

      # Развертывание в Minikube
      - name: Deploy to Minikube
        shell: pwsh
        run: |
          kubectl create namespace $Env:NAMESPACE || Write-Host "Namespace already exists"
          kubectl config set-context --current --namespace=$Env:NAMESPACE
          kubectl apply -f ./deployment.yaml
          kubectl apply -f ./service.yaml
          kubectl rollout status deployment/expense-tracker

      # Тестирование доступности приложения
      - name: Test application
        shell: pwsh
        run: |
          $URL = minikube service expense-tracker --url
          Write-Host "Application URL: $URL"
          curl.exe -m 10 $URL || Write-Host "Service not accessible"

      # Остановка Minikube
      - name: Stop Minikube
        if: always()
        run: |
          minikube delete
